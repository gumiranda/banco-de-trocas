import { HttpResponse, Repository } from "shared/libs/infra";
import {
  Add{{pascalCase name}}Repository,
  Delete{{pascalCase name}}Repository,
  Load{{pascalCase name}}ByPageRepository,
  Load{{pascalCase name}}Repository,
  Update{{pascalCase name}}Repository,
} from "./contracts";
import { Query } from "shared/types";
import { {{pascalCase name}}Data, {{pascalCase name}}Paginated } from "../{{pascalCase name}}Entity";
export class {{pascalCase name}}Repository
  implements
    Add{{pascalCase name}}Repository,
    Delete{{pascalCase name}}Repository,
    Load{{pascalCase name}}ByPageRepository,
    Load{{pascalCase name}}Repository,
    Update{{pascalCase name}}Repository
{
  constructor(private readonly repository: Repository) {}
  async add{{pascalCase name}}({{camelCase name}}: {{pascalCase name}}Data): Promise<HttpResponse | null> {
    return this.repository.add({{camelCase name}});
  }
  async delete{{pascalCase name}}(query: Query): Promise<HttpResponse | null> {
    return this.repository.deleteOne(query);
  }
  async load{{pascalCase name}}ByPage(query: Query): Promise<{{pascalCase name}}Paginated | null> {
    const {{camelCase name}}s = await this.repository.getPaginate(
      query?.options?.page ?? 0,
      query?.fields ?? {},
      query?.options?.sort ?? "created_at",
      10,
      query?.options?.projection ?? {}
    );
    const total = await this.repository.getCount(query?.fields ?? {});
    return { {{camelCase name}}s, total };
  }
  async load{{pascalCase name}}(query: Query): Promise<HttpResponse | null> {
    return this.repository.getAll(query ?? {});
  }
  async update{{pascalCase name}}(query: Query, data: {{pascalCase name}}Data): Promise<HttpResponse | null> {
    return this.repository.update(query ?? {}, data);
  }
}
